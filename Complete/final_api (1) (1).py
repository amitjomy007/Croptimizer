# -*- coding: utf-8 -*-
"""Final_Api

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UZl5CL1GJ1tE0COGrFai4H4LAZkGj3DR
"""

import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow import keras
from keras import layers
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import LabelEncoder

import flask
import pickle

data = pd.read_csv('Data3.csv')

data.head()

data_1 = data[['Soil_type','Temperature(C)','Rainfall(cm)']]
output1 = data['Crop_type']
labels1 = data['Crop_type'].unique()
print(labels1)

Le = LabelEncoder()
output1 = Le.fit_transform(output1)
la1 = set(output1)
print(la1)
data_1['Soil_type'].unique()

data_1['Soil_type'] = Le.fit_transform(data_1['Soil_type'])
sa1 = data_1['Soil_type'].unique()
print(sa1)

from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.ensemble import AdaBoostClassifier
from sklearn.ensemble import GradientBoostingClassifier
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score

from sklearn.metrics import accuracy_score

train_x, test_x, train_y, test_y = train_test_split(data_1, output1, test_size=0.2, random_state=42)

model13 = keras.Sequential([
    layers.Dense(64, activation='relu', input_shape=(3,)),
    layers.Dense(32, activation='relu'),
    layers.Dense(16, activation='relu'),
    layers.Dense(4, activation='softmax')
])
model13.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model13.fit(train_x, train_y, epochs=10, batch_size=32)

model12 = keras.Sequential([
    layers.Dense(64, activation='relu', input_shape=(3,)),
    layers.Dense(64, activation='relu'),
    layers.Dense(32, activation='relu'),
    layers.Dense(4, activation='softmax')
    ])
model12.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model12.fit(train_x, train_y, epochs=10, batch_size=32)

preds = model12.predict(test_x)
preds = np.argmax(preds, axis=1)
accuracy = accuracy_score(test_y, preds)
print("Accuracy:", accuracy)

#Model Randomforest
model1 = RandomForestClassifier(n_estimators=1)
model1.fit(train_x, train_y)
preds = model1.predict(test_x)
accuracy = accuracy_score(test_y, preds)
print("Accuracy:", accuracy)

#Model SVC
model2 = SVC(kernel='poly',probability=True,degree=5,random_state=42)
model2.fit(train_x, train_y)
preds = model2.predict(test_x)
accuracy = accuracy_score(test_y, preds)
print("Accuracy:", accuracy)

pickle.dump(model1, open('RandomForest.pkl', 'wb'))
pickle.dump(model2, open('SVC.pkl', 'wb'))

#Model 2
 data_2 = data[['Organic_content']]

labels2 = ['High','Medium','Low']
print(labels2)

data.head(15)

Oh = LabelEncoder()
output2 = Oh.fit_transform(data['Yield_Type'])
output2 = pd.DataFrame(output2, columns=['Yield_Type'])

output2.head(15)

data_2['Organic_content'] = Le.fit_transform(data_2['Organic_content'])
sa2 = data_2['Organic_content'].unique()
print(sa2)

train_x, test_x, train_y, test_y = train_test_split(data_2, output2, test_size=0.2, random_state=42)

model = SVC(kernel='linear',random_state=42)
model.fit(train_x, train_y)
preds = model.predict(test_x)
accuracy = accuracy_score(test_y, preds)
print("Accuracy:", accuracy)

model2= RandomForestClassifier(n_estimators=1,random_state=42)
model2.fit(train_x, train_y)
preds = model2.predict(test_x)
accuracy = accuracy_score(test_y, preds)
print("Accuracy:", accuracy)

model3 = LogisticRegression(random_state=42)
model3.fit(train_x, train_y)
preds = model3.predict(test_x)
accuracy = accuracy_score(test_y, preds)
print("Accuracy:", accuracy)

model4 = KNeighborsClassifier(n_neighbors=5)
model4.fit(train_x, train_y)
preds = model4.predict(test_x)
accuracy = accuracy_score(test_y, preds)
print("Accuracy:", accuracy)

model5 = GaussianNB()
model5.fit(train_x, train_y)
preds = model5.predict(test_x)
accuracy = accuracy_score(test_y, preds)
print("Accuracy:", accuracy)

model6 = DecisionTreeClassifier(random_state=42)
model6.fit(train_x, train_y)
preds = model6.predict(test_x)
accuracy = accuracy_score(test_y, preds)
print("Accuracy:", accuracy)

model7 = AdaBoostClassifier(random_state=42)
model7.fit(train_x, train_y)
preds = model7.predict(test_x)
accuracy = accuracy_score(test_y, preds)
print("Accuracy:", accuracy)

model8 = GradientBoostingClassifier(random_state=42)
model8.fit(train_x, train_y)
preds = model8.predict(test_x)
accuracy = accuracy_score(test_y, preds)
print("Accuracy:", accuracy)

model9 = XGBClassifier(random_state=42)
model9.fit(train_x, train_y)
preds = model9.predict(test_x)
accuracy = accuracy_score(test_y, preds)
print("Accuracy:", accuracy)

model10 = keras.Sequential([
    layers.Dense(64, activation='relu', input_shape=(1,)),
    layers.Dense(64, activation='relu'),
    layers.Dense(64, activation='relu'),
    layers.Dense(32, activation='relu'),
    layers.Dense(16, activation='relu'),
    layers.Dense(8, activation='relu'),
    layers.Dense(3, activation='softmax')
])
model10.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model10.fit(train_x, train_y, epochs=50, batch_size=32)

preds = model10.predict(test_x)
preds = np.argmax(preds, axis=1)
accuracy = accuracy_score(test_y, preds)
print("Accuracy:", accuracy)

pickle.dump(model10, open('Yield.pkl', 'wb'))

